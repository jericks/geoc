_geoc()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local line=${COMP_LINE}
    local cmd=${line##*geoc }
    COMPREPLY=()
    if [[ "$line" == *"geoc filter cql2xml "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --cql' -- $cur))
    elif [[ "$line" == *"geoc filter " ]]; then
        COMPREPLY=($(compgen -W ' cql2xml'))
    elif [[ "$line" == *"geoc filter"[[:space:]][[:alpha:]]* ]]; then
        if [[ "filter cql2xml" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' cql2xml'))
        fi
    elif [[ "$line" == *"geoc geometry convert "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --format -i --input -p --format-options -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry dd2pt "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --decimaldegrees -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry geohash bounds "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -d --bit-depth -n --number-of-chars -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry geohash decode "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry geohash encode "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --bit-depth -i --input -n --number-of-chars -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry geohash neighbors "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --bit-depth -i --input -n --number-of-chars' -- $cur))
    elif [[ "$line" == *"geoc geometry geohash " ]]; then
        COMPREPLY=($(compgen -W ' bounds  decode  encode  neighbors'))
    elif [[ "$line" == *"geoc geometry geohash"[[:space:]][[:alpha:]]* ]]; then
        if [[ "geometry geohash bounds" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' bounds'))
        fi
        if [[ "geometry geohash decode" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' decode'))
        fi
        if [[ "geometry geohash encode" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' encode'))
        fi
        if [[ "geometry geohash neighbors" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' neighbors'))
        fi
    elif [[ "$line" == *"geoc geometry greatcirclearc "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --ellipsoid -n --num-points -p --start-point -t --end-point' -- $cur))
    elif [[ "$line" == *"geoc geometry orthodromicdistance "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --ellipsoid -p --start-point -t --end-point' -- $cur))
    elif [[ "$line" == *"geoc geometry plot "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --draw-coords -f --file -h --height -i --input -l --legend -p --fill-polys -r --fill-coords -w --width' -- $cur))
    elif [[ "$line" == *"geoc geometry pt2dd "* ]]; then
        COMPREPLY=($(compgen -W '--help -p --point -t --type' -- $cur))
    elif [[ "$line" == *"geoc geometry " ]]; then
        COMPREPLY=($(compgen -W ' convert  dd2pt  geohash  greatcirclearc  orthodromicdistance  plot  pt2dd'))
    elif [[ "$line" == *"geoc geometry"[[:space:]][[:alpha:]]* ]]; then
        if [[ "geometry convert" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' convert'))
        fi
        if [[ "geometry dd2pt" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' dd2pt'))
        fi
        if [[ "geometry geohash" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' geohash'))
        fi
        if [[ "geometry greatcirclearc" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' greatcirclearc'))
        fi
        if [[ "geometry orthodromicdistance" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' orthodromicdistance'))
        fi
        if [[ "geometry plot" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' plot'))
        fi
        if [[ "geometry pt2dd" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' pt2dd'))
        fi
    elif [[ "$line" == *"geoc list "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --description' -- $cur))
    elif [[ "$line" == *"geoc map cube "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --file -m --map -s --tab-size -t --draw-tabs' -- $cur))
    elif [[ "$line" == *"geoc map " ]]; then
        COMPREPLY=($(compgen -W ' cube'))
    elif [[ "$line" == *"geoc map"[[:space:]][[:alpha:]]* ]]; then
        if [[ "map cube" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' cube'))
        fi
    elif [[ "$line" == *"geoc proj envelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --epsg -g --geo-bounds -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc proj wkt "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --citation -e --epsg -f --file -i --indentation' -- $cur))
    elif [[ "$line" == *"geoc proj " ]]; then
        COMPREPLY=($(compgen -W ' envelope  wkt'))
    elif [[ "$line" == *"geoc proj"[[:space:]][[:alpha:]]* ]]; then
        if [[ "proj envelope" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' envelope'))
        fi
        if [[ "proj wkt" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' wkt'))
        fi
    elif [[ "$line" == *"geoc raster abs "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster add constant "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -v --value' -- $cur))
    elif [[ "$line" == *"geoc raster add " ]]; then
        COMPREPLY=($(compgen -W ' constant'))
    elif [[ "$line" == *"geoc raster add"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster add constant" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' constant'))
        fi
    elif [[ "$line" == *"geoc raster animatedgif "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --delay -f --file -o --output-file -r --repeat' -- $cur))
    elif [[ "$line" == *"geoc raster contour "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --band -i --input-raster -l --input-raster-name -m --smooth -n --bounds -o --output-workspace -p --input-projection -r --output-layer -s --simplify -v --level' -- $cur))
    elif [[ "$line" == *"geoc raster crop with geometry "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -g --geometry -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster crop with layer "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -w --input-workspace -y --input-layer' -- $cur))
    elif [[ "$line" == *"geoc raster crop with " ]]; then
        COMPREPLY=($(compgen -W ' geometry  layer'))
    elif [[ "$line" == *"geoc raster crop with"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster crop with geometry" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' geometry'))
        fi
        if [[ "raster crop with layer" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' layer'))
        fi
    elif [[ "$line" == *"geoc raster crop " ]]; then
        COMPREPLY=($(compgen -W ' with'))
    elif [[ "$line" == *"geoc raster crop"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster crop with" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' with'))
        fi
    elif [[ "$line" == *"geoc raster display "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -g --background-color -h --height -i --input-raster -l --input-raster-name -m --base-map -p --input-projection -s --sld-file -w --width' -- $cur))
    elif [[ "$line" == *"geoc raster divide constant "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -v --value' -- $cur))
    elif [[ "$line" == *"geoc raster divide " ]]; then
        COMPREPLY=($(compgen -W ' constant'))
    elif [[ "$line" == *"geoc raster divide"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster divide constant" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' constant'))
        fi
    elif [[ "$line" == *"geoc raster draw "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -f --file -h --height -i --input-raster -l --input-raster-name -m --base-map -p --input-projection -s --sld-file -t --type -w --width' -- $cur))
    elif [[ "$line" == *"geoc raster envelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-raster -l --input-raster-name -o --output-workspace -p --input-projection -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc raster exp "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster extractfootprint "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --remove-collinear -e --exclusion-range -f --compute-simplified-footprint -i --input-raster -l --input-raster-name -o --output-workspace -p --input-projection -r --output-layer -s --simplifier-factor -t --threshold-area -v --force-valid -y --loading-type' -- $cur))
    elif [[ "$line" == *"geoc raster get value "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --band -i --input-raster -l --input-raster-name -p --input-projection -t --type -x --x-coordinate -y --y-coordinate' -- $cur))
    elif [[ "$line" == *"geoc raster get " ]]; then
        COMPREPLY=($(compgen -W ' value'))
    elif [[ "$line" == *"geoc raster get"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster get value" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' value'))
        fi
    elif [[ "$line" == *"geoc raster info "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-raster -l --input-raster-name -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster invert "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster log "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster mapalgebra "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -f --output-raster-format -n --output-name -o --output-raster -p --output-raster-projection -r --raster -s --script -z --size' -- $cur))
    elif [[ "$line" == *"geoc raster multiply constant "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -v --value' -- $cur))
    elif [[ "$line" == *"geoc raster multiply " ]]; then
        COMPREPLY=($(compgen -W ' constant'))
    elif [[ "$line" == *"geoc raster multiply"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster multiply constant" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' constant'))
        fi
    elif [[ "$line" == *"geoc raster point "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-raster -l --input-raster-name -o --output-workspace -p --input-projection -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc raster polygon "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --range -b --band -e --inside-edges -g --region-of-interest -i --input-raster -l --input-raster-name -n --no-data -o --output-workspace -p --input-projection -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc raster project "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -t --target-projection' -- $cur))
    elif [[ "$line" == *"geoc raster reclassify "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --band -f --output-raster-format -i --input-raster -l --input-raster-name -n --nodata -o --output-raster -p --input-projection -r --range' -- $cur))
    elif [[ "$line" == *"geoc raster resample "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -s --size' -- $cur))
    elif [[ "$line" == *"geoc raster scale "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -n --interpolation -o --output-raster -p --input-projection -r --y-translate -t --x-translate -x --x-scale -y --y-scale' -- $cur))
    elif [[ "$line" == *"geoc raster style channel selection "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --blue -g --green -o --opacity -r --red -y --gray' -- $cur))
    elif [[ "$line" == *"geoc raster style channel " ]]; then
        COMPREPLY=($(compgen -W ' selection'))
    elif [[ "$line" == *"geoc raster style channel"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster style channel selection" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' selection'))
        fi
    elif [[ "$line" == *"geoc raster style colormap "* ]]; then
        COMPREPLY=($(compgen -W '--help -e --extended -o --opacity -t --type -v --value' -- $cur))
    elif [[ "$line" == *"geoc raster style contrast enhancement "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --gamma-value -m --method -o --opacity' -- $cur))
    elif [[ "$line" == *"geoc raster style contrast " ]]; then
        COMPREPLY=($(compgen -W ' enhancement'))
    elif [[ "$line" == *"geoc raster style contrast"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster style contrast enhancement" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' enhancement'))
        fi
    elif [[ "$line" == *"geoc raster style default "* ]]; then
        COMPREPLY=($(compgen -W '--help -o --opacity' -- $cur))
    elif [[ "$line" == *"geoc raster style shadedrelief "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --brightness-only -o --opacity -r --relief-factor' -- $cur))
    elif [[ "$line" == *"geoc raster style " ]]; then
        COMPREPLY=($(compgen -W ' channel  colormap  contrast  default  shadedrelief'))
    elif [[ "$line" == *"geoc raster style"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster style channel" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' channel'))
        fi
        if [[ "raster style colormap" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' colormap'))
        fi
        if [[ "raster style contrast" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' contrast'))
        fi
        if [[ "raster style default" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' default'))
        fi
        if [[ "raster style shadedrelief" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' shadedrelief'))
        fi
    elif [[ "$line" == *"geoc raster stylize "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection -s --style' -- $cur))
    elif [[ "$line" == *"geoc raster subtract constant "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -m --from -o --output-raster -p --input-projection -v --value' -- $cur))
    elif [[ "$line" == *"geoc raster subtract " ]]; then
        COMPREPLY=($(compgen -W ' constant'))
    elif [[ "$line" == *"geoc raster subtract"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster subtract constant" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' constant'))
        fi
    elif [[ "$line" == *"geoc raster to "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --output-raster-format -i --input-raster -l --input-raster-name -o --output-raster -p --input-projection' -- $cur))
    elif [[ "$line" == *"geoc raster worldfile "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -f --file -s --size' -- $cur))
    elif [[ "$line" == *"geoc raster " ]]; then
        COMPREPLY=($(compgen -W ' abs  add  animatedgif  contour  crop  display  divide  draw  envelope  exp  extractfootprint  get  info  invert  log  mapalgebra  multiply  point  polygon  project  reclassify  resample  scale  style  stylize  subtract  to  worldfile'))
    elif [[ "$line" == *"geoc raster"[[:space:]][[:alpha:]]* ]]; then
        if [[ "raster abs" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' abs'))
        fi
        if [[ "raster add" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' add'))
        fi
        if [[ "raster animatedgif" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' animatedgif'))
        fi
        if [[ "raster contour" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' contour'))
        fi
        if [[ "raster crop" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' crop'))
        fi
        if [[ "raster display" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' display'))
        fi
        if [[ "raster divide" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' divide'))
        fi
        if [[ "raster draw" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' draw'))
        fi
        if [[ "raster envelope" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' envelope'))
        fi
        if [[ "raster exp" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' exp'))
        fi
        if [[ "raster extractfootprint" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' extractfootprint'))
        fi
        if [[ "raster get" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' get'))
        fi
        if [[ "raster info" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' info'))
        fi
        if [[ "raster invert" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' invert'))
        fi
        if [[ "raster log" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' log'))
        fi
        if [[ "raster mapalgebra" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' mapalgebra'))
        fi
        if [[ "raster multiply" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' multiply'))
        fi
        if [[ "raster point" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' point'))
        fi
        if [[ "raster polygon" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' polygon'))
        fi
        if [[ "raster project" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' project'))
        fi
        if [[ "raster reclassify" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' reclassify'))
        fi
        if [[ "raster resample" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' resample'))
        fi
        if [[ "raster scale" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' scale'))
        fi
        if [[ "raster style" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' style'))
        fi
        if [[ "raster stylize" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' stylize'))
        fi
        if [[ "raster subtract" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' subtract'))
        fi
        if [[ "raster to" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' to'))
        fi
        if [[ "raster worldfile" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' worldfile'))
        fi
    elif [[ "$line" == *"geoc style css2sld "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input -o --output' -- $cur))
    elif [[ "$line" == *"geoc style " ]]; then
        COMPREPLY=($(compgen -W ' css2sld'))
    elif [[ "$line" == *"geoc style"[[:space:]][[:alpha:]]* ]]; then
        if [[ "style css2sld" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' css2sld'))
        fi
    elif [[ "$line" == *"geoc tile delete "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --maxx -i --tile -l --tile-layer -n --tile-layer-name -p --pyramid -t --type -u --maxy -x --minx -y --miny -z --zoom-level' -- $cur))
    elif [[ "$line" == *"geoc tile generate "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -d --layer-fields -e --end-zoom -f --field -i --missing -l --tile-layer -m --base-map -n --tile-layer-name -p --pyramid -s --start-zoom -t --type -v --verbose' -- $cur))
    elif [[ "$line" == *"geoc tile pyramid "* ]]; then
        COMPREPLY=($(compgen -W '--help -l --tile-layer -n --tile-layer-name -o --output-type -p --pyramid -t --type' -- $cur))
    elif [[ "$line" == *"geoc tile stitch raster "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --maxx -f --output-raster-format -h --height -l --tile-layer -n --tile-layer-name -o --output-raster -p --pyramid -t --type -u --maxy -w --width -x --minx -y --miny -z --zoom-level' -- $cur))
    elif [[ "$line" == *"geoc tile stitch vector "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --maxx -h --height -l --tile-layer -n --tile-layer-name -o --output-workspace -p --pyramid -t --type -u --maxy -w --width -x --minx -y --miny -z --zoom-level' -- $cur))
    elif [[ "$line" == *"geoc tile stitch " ]]; then
        COMPREPLY=($(compgen -W ' raster  vector'))
    elif [[ "$line" == *"geoc tile stitch"[[:space:]][[:alpha:]]* ]]; then
        if [[ "tile stitch raster" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' raster'))
        fi
        if [[ "tile stitch vector" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' vector'))
        fi
    elif [[ "$line" == *"geoc tile vector grid "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --maxx -l --tile-layer -n --tile-layer-name -o --output-workspace -p --pyramid -r --output-layer -t --type -u --maxy -x --minx -y --miny -z --zoom-level' -- $cur))
    elif [[ "$line" == *"geoc tile vector " ]]; then
        COMPREPLY=($(compgen -W ' grid'))
    elif [[ "$line" == *"geoc tile vector"[[:space:]][[:alpha:]]* ]]; then
        if [[ "tile vector grid" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' grid'))
        fi
    elif [[ "$line" == *"geoc tile " ]]; then
        COMPREPLY=($(compgen -W ' delete  generate  pyramid  stitch  vector'))
    elif [[ "$line" == *"geoc tile"[[:space:]][[:alpha:]]* ]]; then
        if [[ "tile delete" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' delete'))
        fi
        if [[ "tile generate" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' generate'))
        fi
        if [[ "tile pyramid" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' pyramid'))
        fi
        if [[ "tile stitch" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' stitch'))
        fi
        if [[ "tile vector" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' vector'))
        fi
    elif [[ "$line" == *"geoc vector add "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -v --value' -- $cur))
    elif [[ "$line" == *"geoc vector addareafield "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --area-fieldname -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector addfields "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector addidfield "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --id-fieldname -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -s --start' -- $cur))
    elif [[ "$line" == *"geoc vector addlengthfield "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --length-fieldname -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector addxyfields "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -x --x-fieldname -y --y-fieldname' -- $cur))
    elif [[ "$line" == *"geoc vector append "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector arc "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -e --end-angle -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -s --start-angle -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector arcpolygon "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -e --end-angle -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -s --start-angle -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector barnessurface "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --convergence -d --data-limit -e --pixels-per-cell -f --output-raster-format -h --height -i --input-workspace -l --input-layer -m --min-observations -n --no-data -o --output-raster -p --passes -q --query-buffer -s --scale -v --value-field -w --width -x --max-observation-distance' -- $cur))
    elif [[ "$line" == *"geoc vector buffer "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --capstyle -d --distance -i --input-workspace -l --input-layer -o --output-workspace -q --quadrantsegments -r --output-layer -s --singlesided' -- $cur))
    elif [[ "$line" == *"geoc vector centroid "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector clip "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector compareschemas "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -p --pretty-print -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector convexhull "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector convexhulls "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector coordinates "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector copy "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --field -f --filter -i --input-workspace -l --input-layer -m --max -o --output-workspace -r --output-layer -s --sort -t --start' -- $cur))
    elif [[ "$line" == *"geoc vector count featuresInfeature "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --count-fieldname -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector count " ]]; then
        COMPREPLY=($(compgen -W ' featuresInfeature'))
    elif [[ "$line" == *"geoc vector count"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector count featuresInfeature" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' featuresInfeature'))
        fi
    elif [[ "$line" == *"geoc vector create "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector database index create "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --index-name -l --layer-name -u --unique -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database index delete "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --index-name -l --layer-name -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database index list "* ]]; then
        COMPREPLY=($(compgen -W '--help -l --layer-name -p --pretty-print -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database index " ]]; then
        COMPREPLY=($(compgen -W ' create  delete  list'))
    elif [[ "$line" == *"geoc vector database index"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector database index create" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' create'))
        fi
        if [[ "vector database index delete" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' delete'))
        fi
        if [[ "vector database index list" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' list'))
        fi
    elif [[ "$line" == *"geoc vector database remove "* ]]; then
        COMPREPLY=($(compgen -W '--help -l --layer-name -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database select "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry-field -l --layer-name -o --output-workspace -p --primary-key-field -r --output-layer -s --sql -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database sql "* ]]; then
        COMPREPLY=($(compgen -W '--help -s --sql -w --database-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector database " ]]; then
        COMPREPLY=($(compgen -W ' index  remove  select  sql'))
    elif [[ "$line" == *"geoc vector database"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector database index" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' index'))
        fi
        if [[ "vector database remove" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' remove'))
        fi
        if [[ "vector database select" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' select'))
        fi
        if [[ "vector database sql" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' sql'))
        fi
    elif [[ "$line" == *"geoc vector datastorelist "* ]]; then
        COMPREPLY=($(compgen -W '--help' -- $cur))
    elif [[ "$line" == *"geoc vector datastoreparams "* ]]; then
        COMPREPLY=($(compgen -W '--help -n --name' -- $cur))
    elif [[ "$line" == *"geoc vector defaultstyle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --color -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector delaunay "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector delete "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --filter -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector densify "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --distance -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector display "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -g --background-color -h --height -i --input-workspace -l --input-layer -m --base-map -s --sld-file -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector dissolvebyfield "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --count-field -d --id-field -f --field -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector dissolveintersecting "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --count-field -d --id-field -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector draw "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -f --file -g --background-color -h --height -i --input-workspace -l --input-layer -m --base-map -s --sld-file -t --type -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector ellipse "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector envelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector envelopes "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector erase "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector filter "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --filter -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector from "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --format -g --geometry-type -o --output-workspace -p --format-options -r --output-layer -t --text' -- $cur))
    elif [[ "$line" == *"geoc vector geomr "* ]]; then
        COMPREPLY=($(compgen -W '--help -o --output-workspace -r --output-layer -t --text' -- $cur))
    elif [[ "$line" == *"geoc vector geomw "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector gradientstyle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --colors -e --else-mode -f --field -i --input-workspace -l --input-layer -m --method -n --number' -- $cur))
    elif [[ "$line" == *"geoc vector grid "* ]]; then
        COMPREPLY=($(compgen -W '--help -g --geometry -h --cell-height -o --output-workspace -p --projection -r --output-layer -t --type -w --cell-width -x --columns -y --rows' -- $cur))
    elif [[ "$line" == *"geoc vector heatmap "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --weight-field -b --bounds -f --output-raster-format -h --height -i --input-workspace -l --input-layer -o --output-raster -p --pixels-per-cell -r --radius-pixels -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector identity "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --include-duplicates -f --first-postfix -i --input-workspace -k --other-workspace -l --input-layer -m --maxfieldname-length -o --output-workspace -p --postfix-all -r --output-layer -s --second-postfix -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector info "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector interiorpoint "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector intersection "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --include-duplicates -f --first-postfix -i --input-workspace -k --other-workspace -l --input-layer -m --maxfieldname-length -o --output-workspace -p --postfix-all -r --output-layer -s --second-postfix -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector join attribute "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -j --table-field -l --input-layer -m --only-include-matching -n --field -o --output-workspace -p --options -r --output-layer -s --table-source -t --table-name -y --layer-field' -- $cur))
    elif [[ "$line" == *"geoc vector join spatial "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -k --other-workspace -l --input-layer -m --multiple-type -o --output-workspace -r --output-layer -t --spatial-type -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector join " ]]; then
        COMPREPLY=($(compgen -W ' attribute  spatial'))
    elif [[ "$line" == *"geoc vector join"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector join attribute" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' attribute'))
        fi
        if [[ "vector join spatial" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' spatial'))
        fi
    elif [[ "$line" == *"geoc vector list layers "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector list " ]]; then
        COMPREPLY=($(compgen -W ' layers'))
    elif [[ "$line" == *"geoc vector list"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector list layers" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' layers'))
        fi
    elif [[ "$line" == *"geoc vector merge "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector mincircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector mincircles "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector minrect "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector minrects "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector multiple2single "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector octagonalenvelope "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector octagonalenvelopes "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector page "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -m --max -o --output-workspace -r --output-layer -t --start' -- $cur))
    elif [[ "$line" == *"geoc vector pointstacker "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --bounds -c --cell-size -h --height -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -s --source-projection -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector project "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -s --source-projection -t --target-projection' -- $cur))
    elif [[ "$line" == *"geoc vector randompoints "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --constrained-to-circle -d --grid -e --geom-fieldname -f --gutter-fraction -g --geometry -n --number -o --output-workspace -p --projection -r --output-layer -u --id-fieldname' -- $cur))
    elif [[ "$line" == *"geoc vector raster values "* ]]; then
        COMPREPLY=($(compgen -W '--help -b --band -e --input-raster-name -i --input-workspace -l --input-layer -n --field-name -o --output-workspace -p --input-projection -r --output-layer -s --input-raster -t --field-type' -- $cur))
    elif [[ "$line" == *"geoc vector raster " ]]; then
        COMPREPLY=($(compgen -W ' values'))
    elif [[ "$line" == *"geoc vector raster"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector raster values" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' values'))
        fi
    elif [[ "$line" == *"geoc vector rectangle "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector reflect "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --x2-distance -d --y2-distance -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -x --x1-distance -y --y1-distance' -- $cur))
    elif [[ "$line" == *"geoc vector removefields "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector rotate "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --cosine -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -s --sine -t --theta -x --x-coord -y --y-coord' -- $cur))
    elif [[ "$line" == *"geoc vector scale "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --x-coord -d --y-coord -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -x --x-distance -y --y-distance' -- $cur))
    elif [[ "$line" == *"geoc vector schema "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -p --pretty-print' -- $cur))
    elif [[ "$line" == *"geoc vector shear "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -x --x-distance -y --y-distance' -- $cur))
    elif [[ "$line" == *"geoc vector simplify "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --algorithm -d --distance -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector sinestar "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -e --arm-length-ratio -g --geometry -h --height -i --input-workspace -l --input-layer -n --number-of-arms -o --output-workspace -p --num-points -r --output-layer -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector single2multiple "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector smooth "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --fit -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector snap points2lines "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --search-distance -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -s --snapped-fieldname -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector snap " ]]; then
        COMPREPLY=($(compgen -W ' points2lines'))
    elif [[ "$line" == *"geoc vector snap"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector snap points2lines" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' points2lines'))
        fi
    elif [[ "$line" == *"geoc vector sort "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -s --sort' -- $cur))
    elif [[ "$line" == *"geoc vector splitbyfield "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer -o --output-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector splitbylayer "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer -o --output-workspace -p --split-layer -s --split-workspace' -- $cur))
    elif [[ "$line" == *"geoc vector squircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector subset "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --filter -i --input-workspace -l --input-layer -m --max -o --output-workspace -r --output-layer -s --sort -t --start' -- $cur))
    elif [[ "$line" == *"geoc vector supercircle "* ]]; then
        COMPREPLY=($(compgen -W '--help -a --rotation -e --power -g --geometry -h --height -i --input-workspace -l --input-layer -o --output-workspace -p --num-points -r --output-layer -u --unit -w --width' -- $cur))
    elif [[ "$line" == *"geoc vector symdifference "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --include-duplicates -f --first-postfix -i --input-workspace -k --other-workspace -l --input-layer -m --maxfieldname-length -o --output-workspace -p --postfix-all -r --output-layer -s --second-postfix -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector to "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --format -i --input-workspace -l --input-layer -p --format-options' -- $cur))
    elif [[ "$line" == *"geoc vector transform "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --definition -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector translate "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer -x --x-distance -y --y-distance' -- $cur))
    elif [[ "$line" == *"geoc vector union "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --include-duplicates -f --first-postfix -i --input-workspace -k --other-workspace -l --input-layer -m --maxfieldname-length -o --output-workspace -p --postfix-all -r --output-layer -s --second-postfix -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector uniquevalues "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector uniquevaluesstyle "* ]]; then
        COMPREPLY=($(compgen -W '--help -c --colors -f --field -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector update "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -k --other-workspace -l --input-layer -o --output-workspace -r --output-layer -y --other-layer' -- $cur))
    elif [[ "$line" == *"geoc vector updatefield "* ]]; then
        COMPREPLY=($(compgen -W '--help -d --field -f --filter -i --input-workspace -l --input-layer -s --script -v --value' -- $cur))
    elif [[ "$line" == *"geoc vector validity "* ]]; then
        COMPREPLY=($(compgen -W '--help -f --field -i --input-workspace -l --input-layer' -- $cur))
    elif [[ "$line" == *"geoc vector voronoi "* ]]; then
        COMPREPLY=($(compgen -W '--help -i --input-workspace -l --input-layer -o --output-workspace -r --output-layer' -- $cur))
    elif [[ "$line" == *"geoc vector " ]]; then
        COMPREPLY=($(compgen -W ' add  addareafield  addfields  addidfield  addlengthfield  addxyfields  append  arc  arcpolygon  barnessurface  buffer  centroid  clip  compareschemas  convexhull  convexhulls  coordinates  copy  count  create  database  datastorelist  datastoreparams  defaultstyle  delaunay  delete  densify  display  dissolvebyfield  dissolveintersecting  draw  ellipse  envelope  envelopes  erase  filter  from  geomr  geomw  gradientstyle  grid  heatmap  identity  info  interiorpoint  intersection  join  list  merge  mincircle  mincircles  minrect  minrects  multiple2single  octagonalenvelope  octagonalenvelopes  page  pointstacker  project  randompoints  raster  rectangle  reflect  removefields  rotate  scale  schema  shear  simplify  sinestar  single2multiple  smooth  snap  sort  splitbyfield  splitbylayer  squircle  subset  supercircle  symdifference  to  transform  translate  union  uniquevalues  uniquevaluesstyle  update  updatefield  validity  voronoi'))
    elif [[ "$line" == *"geoc vector"[[:space:]][[:alpha:]]* ]]; then
        if [[ "vector add" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' add'))
        fi
        if [[ "vector addareafield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' addareafield'))
        fi
        if [[ "vector addfields" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' addfields'))
        fi
        if [[ "vector addidfield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' addidfield'))
        fi
        if [[ "vector addlengthfield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' addlengthfield'))
        fi
        if [[ "vector addxyfields" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' addxyfields'))
        fi
        if [[ "vector append" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' append'))
        fi
        if [[ "vector arc" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' arc'))
        fi
        if [[ "vector arcpolygon" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' arcpolygon'))
        fi
        if [[ "vector barnessurface" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' barnessurface'))
        fi
        if [[ "vector buffer" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' buffer'))
        fi
        if [[ "vector centroid" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' centroid'))
        fi
        if [[ "vector clip" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' clip'))
        fi
        if [[ "vector compareschemas" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' compareschemas'))
        fi
        if [[ "vector convexhull" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' convexhull'))
        fi
        if [[ "vector convexhulls" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' convexhulls'))
        fi
        if [[ "vector coordinates" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' coordinates'))
        fi
        if [[ "vector copy" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' copy'))
        fi
        if [[ "vector count" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' count'))
        fi
        if [[ "vector create" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' create'))
        fi
        if [[ "vector database" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' database'))
        fi
        if [[ "vector datastorelist" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' datastorelist'))
        fi
        if [[ "vector datastoreparams" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' datastoreparams'))
        fi
        if [[ "vector defaultstyle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' defaultstyle'))
        fi
        if [[ "vector delaunay" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' delaunay'))
        fi
        if [[ "vector delete" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' delete'))
        fi
        if [[ "vector densify" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' densify'))
        fi
        if [[ "vector display" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' display'))
        fi
        if [[ "vector dissolvebyfield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' dissolvebyfield'))
        fi
        if [[ "vector dissolveintersecting" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' dissolveintersecting'))
        fi
        if [[ "vector draw" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' draw'))
        fi
        if [[ "vector ellipse" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' ellipse'))
        fi
        if [[ "vector envelope" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' envelope'))
        fi
        if [[ "vector envelopes" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' envelopes'))
        fi
        if [[ "vector erase" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' erase'))
        fi
        if [[ "vector filter" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' filter'))
        fi
        if [[ "vector from" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' from'))
        fi
        if [[ "vector geomr" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' geomr'))
        fi
        if [[ "vector geomw" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' geomw'))
        fi
        if [[ "vector gradientstyle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' gradientstyle'))
        fi
        if [[ "vector grid" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' grid'))
        fi
        if [[ "vector heatmap" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' heatmap'))
        fi
        if [[ "vector identity" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' identity'))
        fi
        if [[ "vector info" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' info'))
        fi
        if [[ "vector interiorpoint" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' interiorpoint'))
        fi
        if [[ "vector intersection" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' intersection'))
        fi
        if [[ "vector join" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' join'))
        fi
        if [[ "vector list" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' list'))
        fi
        if [[ "vector merge" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' merge'))
        fi
        if [[ "vector mincircle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' mincircle'))
        fi
        if [[ "vector mincircles" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' mincircles'))
        fi
        if [[ "vector minrect" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' minrect'))
        fi
        if [[ "vector minrects" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' minrects'))
        fi
        if [[ "vector multiple2single" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' multiple2single'))
        fi
        if [[ "vector octagonalenvelope" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' octagonalenvelope'))
        fi
        if [[ "vector octagonalenvelopes" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' octagonalenvelopes'))
        fi
        if [[ "vector page" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' page'))
        fi
        if [[ "vector pointstacker" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' pointstacker'))
        fi
        if [[ "vector project" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' project'))
        fi
        if [[ "vector randompoints" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' randompoints'))
        fi
        if [[ "vector raster" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' raster'))
        fi
        if [[ "vector rectangle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' rectangle'))
        fi
        if [[ "vector reflect" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' reflect'))
        fi
        if [[ "vector removefields" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' removefields'))
        fi
        if [[ "vector rotate" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' rotate'))
        fi
        if [[ "vector scale" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' scale'))
        fi
        if [[ "vector schema" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' schema'))
        fi
        if [[ "vector shear" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' shear'))
        fi
        if [[ "vector simplify" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' simplify'))
        fi
        if [[ "vector sinestar" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' sinestar'))
        fi
        if [[ "vector single2multiple" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' single2multiple'))
        fi
        if [[ "vector smooth" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' smooth'))
        fi
        if [[ "vector snap" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' snap'))
        fi
        if [[ "vector sort" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' sort'))
        fi
        if [[ "vector splitbyfield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' splitbyfield'))
        fi
        if [[ "vector splitbylayer" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' splitbylayer'))
        fi
        if [[ "vector squircle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' squircle'))
        fi
        if [[ "vector subset" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' subset'))
        fi
        if [[ "vector supercircle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' supercircle'))
        fi
        if [[ "vector symdifference" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' symdifference'))
        fi
        if [[ "vector to" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' to'))
        fi
        if [[ "vector transform" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' transform'))
        fi
        if [[ "vector translate" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' translate'))
        fi
        if [[ "vector union" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' union'))
        fi
        if [[ "vector uniquevalues" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' uniquevalues'))
        fi
        if [[ "vector uniquevaluesstyle" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' uniquevaluesstyle'))
        fi
        if [[ "vector update" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' update'))
        fi
        if [[ "vector updatefield" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' updatefield'))
        fi
        if [[ "vector validity" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' validity'))
        fi
        if [[ "vector voronoi" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' voronoi'))
        fi
    elif [[ "$line" == *"geoc " ]]; then
        COMPREPLY=($(compgen -W ' filter  geometry  list  map  proj  raster  style  tile  vector'))
    elif [[ "$line" == *"geoc"[[:space:]][[:alpha:]]* ]]; then
        if [[ "filter" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' filter'))
        fi
        if [[ "geometry" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' geometry'))
        fi
        if [[ "list" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' list'))
        fi
        if [[ "map" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' map'))
        fi
        if [[ "proj" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' proj'))
        fi
        if [[ "raster" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' raster'))
        fi
        if [[ "style" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' style'))
        fi
        if [[ "tile" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' tile'))
        fi
        if [[ "vector" == "$cmd"* ]]; then
            COMPREPLY=("${COMPREPLY[@]}" $(compgen -W ' vector'))
        fi
    fi
    return 0
} && complete -f -d -F _geoc geoc
